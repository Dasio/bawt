[
{
	"uri": "https://capstonelabs.github.io/bawt/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " Bawt is a chatops framework rather than a bot in itself. This means we don\u0026rsquo;t provide things like the scaffolding for a command line but it also means we remain fairly extensible. This structure allows teams to run their own Bawt without every Bawt being the same.\nUsing Bawt is so simple that two files is all it takes! Our mission is to make Bawt easy and fun to use for everyone, so follow along and let\u0026rsquo;s connect our first bot!\nYour First Bot This tutorial will assume you are working out of your home directory (~ or $HOME)\n1. Create a new directory for our bot:\n mkdir new-bot \u0026amp;\u0026amp; cd new-bot  2. New-Bot will need a binary, so let\u0026rsquo;s create a minimal main.go. The contents should resemble this:\npackage main import ( \u0026quot;flag\u0026quot; \u0026quot;github.com/gopherworks/bawt\u0026quot; _ \u0026quot;github.com/gopherworks/bawt/help\u0026quot; ) // Specify an alternative config file. bawt searches the working // directory and your home folder by default for a file called // `config.json`, `config.yaml`, or `config.toml` if no config // file is specified var configFile = flag.String(\u0026quot;config\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;config file\u0026quot;) func main() { flag.Parse() bot := bawt.New(*configFile) bot.Run() }   Turn your eyes to the imports for just a second. Bawt\u0026rsquo;s code takes advantage of imports with blank identifiers and the package init() functions to load plugins. You do not need to download plugins, as long as you obtain them using modules they\u0026rsquo;ll be versioned for you as well!  3. Almost there! Let\u0026rsquo;s tell New-Bot how to connect to Slack. Reading through our code earlier we\u0026rsquo;re looking for a config file. Bawt will always look for config.(json|yaml|toml) in the current directory and your home directory by default, but bawt.New() takes an optional pointer to override this file.\n{ \u0026quot;Slack\u0026quot;: { \u0026quot;api_token\u0026quot;: \u0026quot;xoxb-mamamamama-papapapapapapapa\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;username\u0026quot;, \u0026quot;general_channel\u0026quot;: \u0026quot;#general\u0026quot;, \u0026quot;team_domain\u0026quot;: \u0026quot;your-team-domain-name\u0026quot;, \u0026quot;join_channels\u0026quot;: [ \u0026quot;#some\u0026quot;, \u0026quot;#other\u0026quot;, \u0026quot;private_group\u0026quot; ], \u0026quot;web_base_url\u0026quot;: \u0026quot;http://host.example.com\u0026quot;, \u0026quot;db_path\u0026quot;: \u0026quot;./bawt.bolt.db\u0026quot; }, \u0026quot;Server\u0026quot;:{ \u0026quot;pid_file\u0026quot;: \u0026quot;/var/run/bawt.pid-or-empty-string\u0026quot; }, }   Each plugin may require different configuration entries but Server and Slack are the two required entries.  4. To make things easy, let\u0026rsquo;s build a Makefile!\nclean: @printf \u0026quot;# Removing vendor dir\\n\u0026quot; @rm -rf vendor @printf \u0026quot;# Removing build dir\\n\u0026quot; @rm -rf build build: clean vendor @env GO111MODULE=on go build -o build/new-bot . @chmod a+x build/new-bot vendor: @go mod tidy @go mod vendor run: ./bawt/new-bot --config config.json  That\u0026rsquo;s it! We\u0026rsquo;re ready to fire New-Bot up!\nmake run\n"
},
{
	"uri": "https://capstonelabs.github.io/bawt/developers/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "",
	"content": " All of Bawt\u0026rsquo;s plugins start with a single struct. This struct stores configuration data that will be unmarshaled to it during the init process.\nAt a minimum a field called bot which is a pointer of type bawt.Bot. This field is required in order to create your first listener, so don\u0026rsquo;t forget it!\ntype Help struct { bot *bawt.Bot }  We\u0026rsquo;ll then use Go\u0026rsquo;s built in init() function to register the plugin at runtime:\nfunc init() { bawt.RegisterPlugin(\u0026amp;Help{}) }  Now our plugin is registered, but it still needs to be initialized.\nInterfaces Bawt\u0026rsquo;s plugins must only satisfy an interface, which in Go means that we must simply adhere to a certain minimal method structure.\nWe do some polymorphism here, but it\u0026rsquo;s not really complicated, so stay with us!\nThe base interface The base interface is Plugin which is satisfied by a struct with no methods.\nThe chat interface The PluginInitializer interface is satisifed by a method of InitPlugin(*Bot). In the context of our Help plugin, let\u0026rsquo;s look how we\u0026rsquo;d use that!\n// InitPlugin initializes the plugin func (h *Help) InitPlugin(bot *bawt.Bot) { h.bot = bot h.listenHelp() } func (h *Help) listenHelp() { h.bot.Listen(\u0026amp;bawt.Listener{ Matches: regexp.MustCompile(`^!help.*`), MessageHandlerFunc: h.handleHelp, }) } func (h *Help) handleHelp(listen *bawt.Listener, msg *bawt.Message) { // Do some things msg.Reply(\u0026quot;Got your message!\u0026quot;) }  Messages are sent to registered listeners as they are received and if the listener regex matches then we execute the MessageHandlerFunc which takes two arguments supplied by Bawt\u0026rsquo;s core: Listener and Message.\nWhile Listener has some useful exported methods, the Message type comes with methods for replying in various ways and will be what a majority of developers will be interacting with.\nThe webserver interface Bawt can extend itself to listen to web requests.\nThe web server plugin interface is fully functional, however, not fully documented. It is currently under development and will receive a lot better documentation in the future :)\n"
},
{
	"uri": "https://capstonelabs.github.io/bawt/developers/10-datastores/",
	"title": "Datastores",
	"tags": [],
	"description": "",
	"content": " Bawt has built in support for BoltDB\nWhy Bolt? You can read more about Bolt above, but this is why Bolt has stayed a part of Bawt:\n Simple Lightweight Resilient  That said, Bolt isn\u0026rsquo;t meant for everything. If you have a usecase for a different datastore then add it!\nTools  BoltDB Web - A web frontend for browsing BoltDB Bolt Browser - A command line browser for BoltDB Bolter - A machine friendly CLI for interrogating BoltDB  "
},
{
	"uri": "https://capstonelabs.github.io/bawt/developers/",
	"title": "Developers",
	"tags": [],
	"description": "",
	"content": " Whether you\u0026rsquo;re developing on Bawt\u0026rsquo;s core functionality or a new plugin, development should always be fun. If you spot something that\u0026rsquo;s not enjoyable then open an issue and let\u0026rsquo;s start fixing it together.\nPrerequisites  Read the Code of Conduct Read our Contributing Guide  "
},
{
	"uri": "https://capstonelabs.github.io/bawt/press-kit/",
	"title": "Press Kit",
	"tags": [],
	"description": "",
	"content": " Authorized logos   Logos   bawt-colored.png  (24 ko)   bawt-colored.svg  (33 ko)   bawt-white.png  (23 ko)   bawt-white.svg  (33 ko)    The logos use Prosto One as their font.\nColors are: #00baff and #ffffff\n"
},
{
	"uri": "https://capstonelabs.github.io/bawt/code-of-conduct/",
	"title": "Code of Conduct",
	"tags": [],
	"description": "",
	"content": " Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\nOur Standards Examples of behavior that contributes to creating a positive environment include:\n Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:\n The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u0026rsquo; private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at matthew.ouille@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u0026rsquo;s leadership.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4\n"
},
{
	"uri": "https://capstonelabs.github.io/bawt/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://capstonelabs.github.io/bawt/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://capstonelabs.github.io/bawt/",
	"title": "home",
	"tags": [],
	"description": "",
	"content": " Bawt is a Slack bot framework written in Go. Our goal is that bawt is always easy to start, easy to run, easy to enhance\nEasy to start. The single biggest turn off I had when trying out a new project was the amount of time it took me to get started with something meaningful. The plugin footprint is intentionally light yet extensive and why Bawt\u0026rsquo;s core can be started with just two files. We aim to strike a rare balance of extensibility and simplicity.\nEasy to run. Bawt is updated via modules and follows Semantic Versioning (SemVer) so you\u0026rsquo;ll always know what sort of changes await you. Bawt\u0026rsquo;s core code is abstracted into the Messaging API so even when Slack breaks their API\u0026rsquo;s (and they will) you will never notice as a plugin developer.\nEasy to enhance. We want Bawt\u0026rsquo;s code to make sense not just to core developers but to plugin devs as well. That\u0026rsquo;s why Bawt\u0026rsquo;s core is both verbose and descriptive. There\u0026rsquo;s no buried functionality, what you see is what you get.\nFeatures This is by far not a comprehensive list\n Easy to start, Easy to maintain, Easy to enhance Plugin API  Single function registration Built in help docs interface Chat, HTTP, or HTTPAuth type plugins  Messaging API  Channel and DM\u0026rsquo;s Public and private messages Ephemeral messages (disappear after duration) Update previously sent message File and Snippet uploads  Listener API  Dynamic registration and deregistration Listen for Messages, Edits, Reactions\u0026hellip; Regex and contains based checks  BoltDB for data persistence Central Slack event loop Tracks state internally (Channels, Users, and their state) Built in web server that support authentication  Communication between web plugins and chat plugins  Uses modules for versioning  "
}]