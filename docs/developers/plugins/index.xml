<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plugins on Documentation for Hugo Learn Theme</title>
    <link>https://capstonelabs.github.io/bawt/developers/plugins/</link>
    <description>Recent content in Plugins on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://capstonelabs.github.io/bawt/developers/plugins/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Loading Config</title>
      <link>https://capstonelabs.github.io/bawt/developers/plugins/20-useful-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://capstonelabs.github.io/bawt/developers/plugins/20-useful-functions/</guid>
      <description>Bawt lets plugins consume configuration just the same way Bawt does.
bawt.LoadConfig() can be utilized to marshal a struct that has fields you&amp;rsquo;re looking for. Let&amp;rsquo;s take a look at what that looks like in practice:
Let&amp;rsquo;s say we&amp;rsquo;re developing a plugin called Sample Plugin
type SamplePlugin struct { bot *bawt.Bot }  SamplePlugin needs some config though.
type PluginConfig struct { Foo string `json:&amp;quot;foo&amp;quot;` Bar string `json:&amp;quot;bar&amp;quot;` Foobar string `json:&amp;quot;foobar&amp;quot;` }  Bawt utilizes Viper under the hood, so if you&amp;rsquo;re familiar with Viper then you&amp;rsquo;ll find working with Bawt&amp;rsquo;s config loader very simple.</description>
    </item>
    
  </channel>
</rss>